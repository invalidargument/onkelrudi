<?xml version="1.0" encoding="UTF-8"?>
<project name="Onkel Rudi" default="build" basedir=".">
    <description>Build and test Onkel Rudi.</description>

    <tstamp>
        <format property="buildtimestamp" pattern="yyyyMMdd-HHmmss" locale="de,DE" />
    </tstamp>

    <property file="deployment/settings.yml"/>

    <target name="build"
        depends="prepare, lint, composer, liquibase, phploc, phpmd, phpcpd, phpcs, phpunit, behat, composer_optimize, archive"/>

    <target name="clean" description="Cleanup artifacts">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/onkelrudi"/>
        <delete dir="${basedir}/src/cache"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare build">
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/onkelrudi"/>
        <mkdir dir="${basedir}/src/cache"/>

        <copy file="${basedir}/src/Config/Config.php.dist" tofile="${basedir}/src/Config/Config.php" overwrite="true"/>
        <replace file="${basedir}/src/Config/Config.php" token="{{dsn}}" value="${dsn}"/>
        <replace file="${basedir}/src/Config/Config.php" token="{{user}}" value="${user}"/>
        <replace file="${basedir}/src/Config/Config.php" token="{{password}}" value="${password}"/>
        <replace file="${basedir}/src/Config/Config.php" token="{{environment}}" value="${environment}"/>
        <replace file="${basedir}/src/Config/Config.php" token="{{domain}}" value="${domain}"/>
    </target>

    <target name="composer" description="composer update">
        <exec executable="composer" failonerror="true">
            <arg value="update" />
        </exec>
    </target>

    <target name="composer_optimize" description="composer dump autoload">
        <exec executable="composer" failonerror="true">
            <arg value="dump-autoload" />
            <arg value="--optimize" />
        </exec>
    </target>

    <target name="liquibase" description="liquibase update">
        <exec executable="vendor/alcaeus/liquibase/liquibase" failonerror="true">
            <arg value="--defaultsFile=deployment/liquibase.properties" />
            <arg value="update" />
        </exec>
    </target>

    <target name="lint" description="Syntax check">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Project size">
        <exec executable="vendor/bin/phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd" description="Project mess detection">
        <exec executable="vendor/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="codesize,unusedcode,naming" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcpd" description="Duplicate code">
        <exec executable="vendor/bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs" description="Code Sniffer">
        <exec executable="vendor/bin/phpcs">
            <arg value="-n" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpunit">
        <exec dir="${basedir}" executable="vendor/bin/phpunit" failonerror="true" description="Unit tests">
            <env key="APPLICATION_ENV" value="testing"/>
            <arg line="--verbose --stderr" />
            <arg value="--coverage-html" />
            <arg value="${basedir}/build/coverage" />
        </exec>
    </target>
    <target name="behat">
        <exec dir="${basedir}" executable="vendor/bin/behat" failonerror="true" description="Unit tests">
            <env key="APPLICATION_ENV" value="testing"/>
        </exec>
    </target>

    <target name="prepare-backend-for-deployment">
        <echo message="Copy relevant PHP files to build/onkelrudi..."/>
        <copy todir="${basedir}/build/onkelrudi/public">
            <fileset dir="${basedir}/public">
                <exclude name="bower_components/"/>
            </fileset>
        </copy>
        <copy todir="${basedir}/build/onkelrudi/src">
            <fileset dir="${basedir}/src">
                <exclude name="src/cache"/>
            </fileset>
        </copy>
        <copy todir="${basedir}/build/onkelrudi/vendor">
            <fileset dir="${basedir}/vendor"/>
        </copy>
    </target>

    <target name="prepare-frontend-for-deployment">
        <echo message="Copy relevant HTML/JS/CSS files to build/onkelrudi..."/>
        <exec executable="grunt" dir="${basedir}" outputproperty="log"/>
        <echo message="${log}"/>
        <condition property="onSuccess">
            <matches pattern="Done, without errors." string="${log}"/>
        </condition>
        <fail message="Grunt failed!" unless="onSuccess"/>
    </target>

    <target name="archive" depends="prepare-backend-for-deployment, prepare-frontend-for-deployment">
        <tar compression="gzip" destfile="${basedir}/build/artifacts/onkelrudi_${buildtimestamp}.tar.gz" longfile="posix">
            <tarfileset dir="${basedir}/build/onkelrudi" prefix=".">
                <include name="**/*" />
            </tarfileset>
        </tar>
    </target>
</project>