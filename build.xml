<?xml version="1.0" encoding="UTF-8"?>
<project name="Onkel Rudi" default="build-ci" basedir=".">
    <description>Build and test Onkel Rudi.</description>

    <tstamp>
        <format property="buildtimestamp" pattern="yyyyMMdd-HHmmss" locale="de,DE" />
    </tstamp>

    <property file="deployment/settings.yml"/>
    <property file="deployment/settings_live.yml"/>

    <target name="build-ci"
        depends="prepare-ci, lint, composer, phploc, phpmd, phpcpd, phpcs-ci, phpunit, pdepend"/>

    <target name="build-local"
        depends="prepare, lint, composer, archive"/>

    <target name="clean" description="Cleanup artifacts">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <delete dir="${basedir}/build/onkelrudi"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare build">
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <mkdir dir="${basedir}/build/onkelrudi"/>
    </target>

    <target name="prepare-ci" depends="prepare" description="Prepare build and create needed configuration">
        <copy file="deployment/settings.yml.dist" tofile="deployment/settings.yml" />
    </target>

    <target name="composer" description="composer update">
        <exec executable="php" failonerror="true">
            <arg value="-n" />
            <arg value="-d" />
            <arg value="extension=json.so" />
            <arg value="-dextension=pdo.so" />
            <arg value="-dextension=curl.so" />
            <arg value="-dextension=phar.so" />
            <arg value="-dextension=simplexml.so" />
            <arg value="-dextension=tokenizer.so" />
            <arg value="-dextension=dom.so" />
            <arg value="-dextension=mbstring.so" />
            <arg value="/usr/local/bin/composer" />
            <arg value="update" />
        </exec>
    </target>

    <target name="composer_optimize" description="composer dump autoload">
        <exec executable="php" failonerror="true">
            <arg value="-n" />
            <arg value="-d" />
            <arg value="extension=json.so" />
            <arg value="-dextension=pdo.so" />
            <arg value="-dextension=curl.so" />
            <arg value="-dextension=phar.so" />
            <arg value="-dextension=simplexml.so" />
            <arg value="-dextension=tokenizer.so" />
            <arg value="-dextension=dom.so" />
            <arg value="-dextension=mbstring.so" />
            <arg value="/usr/local/bin/composer" />
            <arg value="update" />
            <arg value="--no-dev" />
            <arg value="-o" />
        </exec>
    </target>

    <target name="liquibase" description="liquibase update">
        <exec executable="vendor/alcaeus/liquibase/liquibase" failonerror="true">
            <arg value="--defaultsFile=deployment/liquibase.properties" />
            <arg value="update" />
        </exec>
    </target>

    <target name="lint" description="Syntax check">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Project size">
        <exec executable="vendor/bin/phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpmd" description="Project mess detection">
        <exec executable="vendor/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="codesize,unusedcode,naming" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcpd" description="Duplicate code">
        <exec executable="vendor/bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Code Sniffer">
        <exec executable="vendor/bin/phpcs" failonerror="true">
            <arg value="-n" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcs" description="Code Sniffer">
        <exec executable="vendor/bin/phpcs" failonerror="true">
            <arg value="-n" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="pdepend" description="Software metrics using PHP_Depend">
        <exec executable="vendor/bin/pdepend" failonerror="true">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpunit">
        <exec dir="${basedir}" executable="vendor/bin/phpunit" failonerror="true" description="Unit tests">
            <arg line="--verbose --stderr" />
            <arg value="--coverage-html" />
            <arg path="${basedir}/build/coverage" />
            <arg value="--coverage-clover" />
            <arg path="${basedir}/build/logs/clover.xml" />
            <arg value="--coverage-crap4j" />
            <arg path="${basedir}/build/logs/crap4j.xml" />
            <arg value="--log-junit" />
            <arg path="${basedir}/build/logs/junit.xml" />
        </exec>
    </target>
    <target name="behat">
        <exec dir="${basedir}" executable="vendor/bin/behat" failonerror="true" description="Acceptance tests"/>
    </target>

    <target name="prepare-backend-for-deployment">
        <echo message="Copy relevant PHP files to build/onkelrudi..."/>
        <copy todir="${basedir}/build/onkelrudi/public">
            <fileset dir="${basedir}/public">
                <exclude name="bower_components/"/>
            </fileset>
        </copy>
        <copy todir="${basedir}/build/onkelrudi/src">
            <fileset dir="${basedir}/src"/>
        </copy>
        <copy todir="${basedir}/build/onkelrudi/vendor">
            <fileset dir="${basedir}/vendor"/>
        </copy>
        <copy file="${basedir}/deployment/settings_live.yml" tofile="${basedir}/build/onkelrudi/deployment/settings.yml"/>
    </target>

    <target name="prepare-frontend-for-deployment">
        <echo message="Copy relevant HTML/JS/CSS files to build/onkelrudi..."/>
        <exec executable="grunt" dir="${basedir}" outputproperty="log"/>
        <echo message="${log}"/>
        <condition property="onSuccess">
            <matches pattern="Done, without errors." string="${log}"/>
        </condition>
        <fail message="Grunt failed!" unless="onSuccess"/>
    </target>

    <target name="archive" depends="tag, composer_optimize, prepare-backend-for-deployment, prepare-frontend-for-deployment">
        <tar compression="gzip" destfile="${basedir}/build/artifacts/onkelrudi_${buildtimestamp}.tar.gz" longfile="posix">
            <tarfileset dir="${basedir}/build/onkelrudi" prefix=".">
                <include name="**/*" />
            </tarfileset>
        </tar>
    </target>

    <target name="tag">
        <echo message="Tagging commit in git..."/>
        <!-- do we want annotated tags for git push - -follow-tags or are lightweight tags enough? -->
        <exec executable="git" failonerror="true">
            <arg value="tag" />
            <arg value="v${buildtimestamp}-lw" />
        </exec>
    </target>

    <target name="deploy">
        <echo message="Deploying to desired environment ${deployment-environment}..."/>
        <echo message="tar -xzf r1/onkelrudi_20160206-193346.tar.gz"/>
        <echo message="cd"/>
        <echo message="ln -sfn Quellordner Linkname"/>
        <echo message="liquibase update"/>
    </target>

    <!--
    <todo>
        <wp-config>
            define('UPLOADS', '../public/img');
            configure wp without year/month folders
        </wp-config>
    </todo>
    //-->
</project>